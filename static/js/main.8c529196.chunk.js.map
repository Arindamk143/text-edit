{"version":3,"sources":["Components/About.js","Components/Alert.js","Components/Navbar.js","Components/Textarea.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","Theme","Settheme","_useState3","_useState4","btnTxt","btnText","react_default","a","createElement","Fragment","className","id","style","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Alert","props","alert","role","sms","data-bs-dismiss","aria-label","Navbar","concat","mode","href","title","react_router_dom","aria-current","to","toggleMode","aria-checked","htmlFor","Textarea","text","setText","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","array","split","i","length","charAt","slice","join","navigator","clipboard","writeText","App","setMode","setAlert","showAlert","document","body","react_router","exact","path","Components_Textarea","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.8c529196.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nexport default function About() {\r\n    const [Theme, Settheme] = useState({\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    })\r\n    const [btnTxt, btnText] = useState(\"Enable Dark Mode\")\r\n    let toggleChange = function () {\r\n\r\n        if (Theme.backgroundColor === \"white\") {\r\n            Settheme({\r\n                color: \"white\",\r\n                backgroundColor: \"black\",\r\n                border: \"1px solid blue\"\r\n            })\r\n            btnText(\"Enable White Mode\")\r\n        }\r\n        else {\r\n            Settheme({\r\n                color: \"black\",\r\n                backgroundColor: \"white\"\r\n            })\r\n            btnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n        <>\r\n            <div className=\"accordion mx-5 my-2\" id=\"accordionExample\" style={Theme}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={Theme} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={Theme}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={Theme} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={Theme}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={Theme} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={Theme}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button className=\"mx-5\" onClick={toggleChange}>{btnTxt}</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{props.alert.type}</strong> {props.alert.sms}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                            </li>\r\n                        </ul>\r\n                        <div className={`form-check form-switch text-${props.mode===\"light\"? \"dark\":\"light\"}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} aria-checked=\"false\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className= \"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode Enable</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nfunction Textarea(props) {\r\n    let Upcase = function(){\r\n        let newText = text.toUpperCase()\r\n        setText(newText);\r\n    }\r\n    let LowerCase = function(){\r\n        let newText = text.toLowerCase()\r\n        setText(newText);\r\n    }\r\n    let capitilizingCase = function(){\r\n        let array = text.split(\" \");\r\n        for(var i=0; i<array.length; i++){\r\n            array[i] = array[i].charAt(0).toUpperCase() + array[i].slice(1);\r\n        }\r\n        let newText = array.join(\" \");\r\n        setText(newText)\r\n    }\r\n    let copyClipboard = function(){\r\n        navigator.clipboard.writeText(text);\r\n        \r\n    }\r\n    let clearText = function(){\r\n        let newText = (\"\")\r\n        setText(newText)\r\n    }\r\n    let changetoUppercase = function(event){\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState(\"\")\r\n    return (\r\n        <>\r\n            <div className={`mb-3 mx-5 text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">{props.title}</label>\r\n                <textarea className=\"form-control\" value={text} onChange={changetoUppercase} id=\"exampleFormControlTextarea1\" rows=\"7\"></textarea>\r\n            </div>\r\n            <button onClick={Upcase} className=\"btn btn-primary mx-5\">Upper Case</button>\r\n            <button onClick={LowerCase} className=\"btn btn-primary mx-5\">Lower Case</button>\r\n            <button onClick={capitilizingCase} className=\"btn btn-primary mx-5\">Capitilizing Case</button>\r\n            <button onClick={copyClipboard} className=\"btn btn-primary mx-5\">Copy To ClipBoard</button>\r\n            <button onClick={clearText} className=\"btn btn-primary mx-5\">Clear Text</button>\r\n\r\n            <div className={`container my-3 text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n                <h2>Your Text Summary</h2>\r\n                <p><strong>Total {text.split(\" \").length} Words And {text.length} Charecters</strong></p>\r\n                <p><strong>Total Times Takes For Read Is {0.006 * text.length} Minutes</strong></p>\r\n            </div>\r\n            <div className={`container my-3 text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n                <h4><strong>Preview</strong></h4>\r\n                <p>{`${text.length>0?text:\"Enter Your Text On The Text Area\"}`}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Textarea\r\n","import React, { } from 'react';\nimport About from './Components/About';\nimport { useState } from 'react';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\nimport Textarea from './Components/Textarea';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const toggleMode = function () {\n    if (mode === \"light\") {\n      setMode(\"dark\")\n      document.body.style.backgroundColor = \"#080540\";\n      showAlert(\"Successfull!\", \"You Did It Congrats!\")\n    }\n    else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\";\n    }\n  }\n  const [alert, setAlert] = useState(null)\n  const showAlert = function (type, sms) {\n    setAlert({\n      type: type,\n      sms: sms\n    })\n  }\n  return (\n    <>\n    <Router>\n    <Navbar title=\"Text Editions\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert} />\n    <div className=\"container my-3\">\n    <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <Textarea title=\"Enter Text Area\" mode={mode} />\n          </Route>\n    </Switch>\n    </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}